{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass DataService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:';\n    this.port = '4001';\n    this.configUrl = '/projects';\n    this.patternEndPoint = '/:pattern=';\n  }\n  getDataMatching(pattern) {\n    const fullUrl = this.url + this.port + this.configUrl + this.patternEndPoint + pattern;\n    console.log('Requesting ' + fullUrl);\n    return this.http.get(fullUrl);\n  }\n  getData() {\n    const fullUrl = this.url + this.port + this.configUrl;\n    console.log('Requesting ' + fullUrl);\n    return this.http.get(fullUrl);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});\nexport { DataService };","map":{"version":3,"names":["DataService","constructor","http","url","port","configUrl","patternEndPoint","getDataMatching","pattern","fullUrl","console","log","get","getData","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hazel\\OneDrive\\Documents\\Projects\\OptimiProject\\ClientCode\\OptimiProject\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  url = 'http://localhost:'\n  port = '4001'\n  configUrl = '/projects';\n  patternEndPoint ='/:pattern=';\n  constructor(private http: HttpClient) { }\n  \n  getDataMatching(pattern:String)\n  {\n    const fullUrl = this.url+this.port+this.configUrl +this.patternEndPoint+pattern;\n    console.log('Requesting ' + fullUrl) \n    return this.http.get(fullUrl);\n  }\n  \n  getData()\n  {\n    const fullUrl = this.url+this.port+this.configUrl;\n    console.log('Requesting ' + fullUrl) \n    return this.http.get<any>(fullUrl);\n  }\n   \n}\n\n\n\n\n\n"],"mappings":";;AAKA,MAGaA,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,GAAG,GAAG,mBAAmB;IACzB,KAAAC,IAAI,GAAG,MAAM;IACb,KAAAC,SAAS,GAAG,WAAW;IACvB,KAAAC,eAAe,GAAE,YAAY;EACW;EAExCC,eAAeA,CAACC,OAAc;IAE5B,MAAMC,OAAO,GAAG,IAAI,CAACN,GAAG,GAAC,IAAI,CAACC,IAAI,GAAC,IAAI,CAACC,SAAS,GAAE,IAAI,CAACC,eAAe,GAACE,OAAO;IAC/EE,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,OAAO,CAAC;IACpC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAACH,OAAO,CAAC;EAC/B;EAEAI,OAAOA,CAAA;IAEL,MAAMJ,OAAO,GAAG,IAAI,CAACN,GAAG,GAAC,IAAI,CAACC,IAAI,GAAC,IAAI,CAACC,SAAS;IACjDK,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,OAAO,CAAC;IACpC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAMH,OAAO,CAAC;EACpC;;AAnBWT,WAAW,C;mBAAXA,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXjB,WAAW,C;SAAXA,WAAW;EAAAkB,OAAA,EAAXlB,WAAW,CAAAmB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPpB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}