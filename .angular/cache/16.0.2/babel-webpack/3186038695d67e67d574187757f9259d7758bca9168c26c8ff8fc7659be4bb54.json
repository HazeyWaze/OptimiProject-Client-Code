{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass DataService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:';\n    this.port = '4001';\n    this.configUrl = '/projects';\n  }\n  getDataMatching(pattern) {\n    console.log('Filter');\n    const fullUrl = this.url + this.port + this.configUrl + '/' + pattern;\n    console.log('Requesting ' + fullUrl);\n    return this.http.get(fullUrl).pipe(catchError(this.handleError));\n  }\n  getData() {\n    const fullUrl = this.url + this.port + this.configUrl;\n    console.log('Requesting ' + fullUrl);\n    return this.http.get(fullUrl).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});\nexport { DataService };","map":{"version":3,"names":["throwError","catchError","DataService","constructor","http","url","port","configUrl","getDataMatching","pattern","console","log","fullUrl","get","pipe","handleError","getData","error","status","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hazel\\OneDrive\\Documents\\Projects\\OptimiProject\\ClientCode\\OptimiProject\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient ,HttpErrorResponse} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  url = 'http://localhost:'\n  port = '4001'\n  configUrl = '/projects';\n  constructor(private http: HttpClient) { }\n  \n  getDataMatching(pattern:String)\n  {\n    console.log('Filter');\n    const fullUrl = this.url+this.port+this.configUrl +'/'+ pattern;\n    console.log('Requesting ' + fullUrl) \n    return this.http.get<any>(fullUrl).pipe(\n      catchError(this.handleError)\n    );\n  }\n  \n  getData()\n  {\n    const fullUrl = this.url+this.port+this.configUrl;\n    console.log('Requesting ' + fullUrl) \n    return this.http.get<any>(fullUrl).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n   \n}\n\n\n\n\n\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAe,gBAAgB;;;AAElD,MAGaC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,GAAG,GAAG,mBAAmB;IACzB,KAAAC,IAAI,GAAG,MAAM;IACb,KAAAC,SAAS,GAAG,WAAW;EACiB;EAExCC,eAAeA,CAACC,OAAc;IAE5BC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,MAAMC,OAAO,GAAG,IAAI,CAACP,GAAG,GAAC,IAAI,CAACC,IAAI,GAAC,IAAI,CAACC,SAAS,GAAE,GAAG,GAAEE,OAAO;IAC/DC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGC,OAAO,CAAC;IACpC,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAMD,OAAO,CAAC,CAACE,IAAI,CACrCb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEAC,OAAOA,CAAA;IAEL,MAAMJ,OAAO,GAAG,IAAI,CAACP,GAAG,GAAC,IAAI,CAACC,IAAI,GAAC,IAAI,CAACC,SAAS;IACjDG,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGC,OAAO,CAAC;IACpC,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAMD,OAAO,CAAC,CAACE,IAAI,CACrCb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAWA,CAACE,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAR,OAAO,CAACO,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAP,OAAO,CAACO,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOjB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;AArCWjB,WAAW,C;mBAAXA,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXrB,WAAW,C;SAAXA,WAAW;EAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPxB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}