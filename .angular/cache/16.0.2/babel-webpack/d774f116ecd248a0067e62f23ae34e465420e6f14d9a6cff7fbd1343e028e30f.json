{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass DataService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = 'http://localhost:';\n    this.port = '4001';\n    this.configUrl = '/projects';\n  }\n  getDataMatching(pattern) {\n    console.log('Filter');\n    const fullUrl = this.url + this.port + this.configUrl + '/' + pattern;\n    console.log('Requesting ' + fullUrl);\n    return this.http.get(fullUrl);\n  }\n  getData() {\n    const fullUrl = this.url + this.port + this.configUrl;\n    console.log('Requesting ' + fullUrl);\n    return this.http.get(fullUrl);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});\nexport { DataService };","map":{"version":3,"names":["DataService","constructor","http","router","url","port","configUrl","getDataMatching","pattern","console","log","fullUrl","get","getData","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hazel\\OneDrive\\Documents\\Projects\\OptimiProject\\ClientCode\\OptimiProject\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient ,HttpErrorResponse} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  url = 'http://localhost:'\n  port = '4001'\n  configUrl = '/projects';\n  constructor(private http: HttpClient, private router: Router) { }\n  \n  getDataMatching(pattern:String)\n  {\n    console.log('Filter');\n    const fullUrl = this.url+this.port+this.configUrl +'/'+ pattern;\n    console.log('Requesting ' + fullUrl) \n    return this.http.get<any>(fullUrl);\n  }\n  \n  getData()\n  {\n    const fullUrl = this.url+this.port+this.configUrl;\n    console.log('Requesting ' + fullUrl) \n    return this.http.get<any>(fullUrl);\n  }\n\n\n   \n}\n\n\n\n\n\n"],"mappings":";;;AAMA,MAGaA,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAHpD,KAAAC,GAAG,GAAG,mBAAmB;IACzB,KAAAC,IAAI,GAAG,MAAM;IACb,KAAAC,SAAS,GAAG,WAAW;EACyC;EAEhEC,eAAeA,CAACC,OAAc;IAE5BC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,MAAMC,OAAO,GAAG,IAAI,CAACP,GAAG,GAAC,IAAI,CAACC,IAAI,GAAC,IAAI,CAACC,SAAS,GAAE,GAAG,GAAEE,OAAO;IAC/DC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGC,OAAO,CAAC;IACpC,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAMD,OAAO,CAAC;EACpC;EAEAE,OAAOA,CAAA;IAEL,MAAMF,OAAO,GAAG,IAAI,CAACP,GAAG,GAAC,IAAI,CAACC,IAAI,GAAC,IAAI,CAACC,SAAS;IACjDG,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGC,OAAO,CAAC;IACpC,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAMD,OAAO,CAAC;EACpC;;AAnBWX,WAAW,C;mBAAXA,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAXnB,WAAW,C;SAAXA,WAAW;EAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPtB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}